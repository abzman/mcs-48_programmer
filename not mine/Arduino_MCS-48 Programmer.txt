/*
 * Program to load a payload into a MCS-48 Microcontroller with an Arduino Nano
 */

#include <avr/io.h>

uint8_t payload[1024] =
{
    0x24, 0xC7, 0x00, 0x44, 0x72, 0xAF, 0x77, 0xD5, 0x65, 0xAC, 0xF8, 0xB8, 0x37, 0xA0, 0xFC, 0x18, 
    0xA0, 0xB8, 0x30, 0xF9, 0x20, 0xA9, 0xFA, 0x18, 0x20, 0xAA, 0xFB, 0x18, 0x20, 0xAB, 0xFD, 0x18, 
    0x20, 0xAD, 0xFE, 0x18, 0x20, 0xAE, 0xFF, 0x18, 0x20, 0xAF, 0x34, 0xB9, 0x8A, 0x07, 0x23, 0x1E, 
    0x39, 0x8A, 0x08, 0x9A, 0xF7, 0xFD, 0xD3, 0x06, 0xC6, 0x91, 0x23, 0xF5, 0x62, 0x55, 0xFD, 0x03, 
    0x20, 0x97, 0x9A, 0xF9, 0x8A, 0x01, 0xA8, 0xF0, 0x39, 0x8A, 0x08, 0x9A, 0xF7, 0xF6, 0x59, 0xFD, 
    0x03, 0x27, 0xA7, 0x9A, 0xFA, 0x8A, 0x02, 0x04, 0x46, 0xFD, 0xB8, 0x2D, 0xD0, 0x39, 0x8A, 0x07, 
    0x8A, 0x08, 0x9A, 0xF7, 0xC5, 0xFF, 0xD5, 0xF2, 0x6B, 0x34, 0x0F, 0x1D, 0xB8, 0x30, 0xF9, 0x20, 
    0xA9, 0xFA, 0x18, 0x20, 0xAA, 0xFB, 0x18, 0x20, 0xAB, 0xFD, 0x18, 0x20, 0xAD, 0xFE, 0x18, 0x20, 
    0xAE, 0xFF, 0x18, 0x20, 0xAF, 0xB8, 0x37, 0xF0, 0xAC, 0x18, 0xF0, 0x2C, 0xA8, 0xFC, 0x8A, 0x10, 
    0x93, 0xC5, 0xFF, 0xD5, 0xF2, 0xD6, 0x34, 0x0F, 0x1D, 0x9A, 0xFF, 0x8A, 0x07, 0x23, 0x1F, 0x39, 
    0x8A, 0x08, 0x9A, 0xF7, 0x34, 0x0F, 0xFB, 0xD3, 0x06, 0xC6, 0xB0, 0x27, 0xAD, 0x1B, 0x04, 0x3A, 
    0xB9, 0xC7, 0x56, 0xB2, 0x9A, 0xF8, 0x8A, 0x08, 0x9A, 0xF7, 0x46, 0xBE, 0xE9, 0xBA, 0xB8, 0x2E, 
    0xF0, 0x69, 0xF6, 0xCD, 0xF0, 0x19, 0x19, 0x69, 0xF6, 0xD6, 0x37, 0xC6, 0xD6, 0xC5, 0x23, 0x01, 
    0x4F, 0xAF, 0xD5, 0xF9, 0x37, 0xA0, 0xD5, 0x27, 0xAB, 0xAD, 0x04, 0x3A, 0xFF, 0x53, 0x3F, 0xA8, 
    0xD3, 0x01, 0xC6, 0xF1, 0xF8, 0xD3, 0x02, 0xC6, 0xF1, 0xF8, 0x53, 0x38, 0xC6, 0xEF, 0x83, 0x24, 
    0x3A, 0xB8, 0x3E, 0x10, 0x23, 0x16, 0xD0, 0xC6, 0xFA, 0x83, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xD2, 0x0B, 0x23, 0x40, 0x4F, 0x53, 0x7F, 0x2F, 0xB0, 0x00, 0x83, 0xF0, 0x07, 0xA0, 0x83, 0xB8, 
    0x3E, 0x23, 0x17, 0xD0, 0xC6, 0x35, 0xFF, 0x96, 0x1B, 0x24, 0x5B, 0x77, 0x77, 0x77, 0x53, 0x07, 
    0xDD, 0x96, 0x35, 0xFE, 0xC6, 0x36, 0x34, 0xAB, 0x12, 0x2F, 0x27, 0xAF, 0xAE, 0xAA, 0x83, 0xEE, 
    0x35, 0x23, 0x40, 0x4F, 0xAF, 0x83, 0x34, 0xAB, 0x12, 0x59, 0xEA, 0x58, 0x1A, 0xFF, 0xD2, 0x58, 
    0xFF, 0x53, 0x3F, 0xA8, 0xD3, 0x01, 0x96, 0x4A, 0x24, 0x51, 0x23, 0x02, 0xD8, 0xC6, 0x51, 0x24, 
    0x55, 0xB8, 0x3E, 0xB0, 0x17, 0x27, 0xAF, 0xAE, 0x83, 0x04, 0xDC, 0x34, 0xB9, 0x53, 0x3F, 0xA8, 
    0xFD, 0xC6, 0x68, 0xF8, 0xC6, 0x58, 0x24, 0x87, 0xC5, 0xFF, 0x77, 0xD5, 0xD8, 0x53, 0x38, 0xC6, 
    0x81, 0xF8, 0xE7, 0xC5, 0x53, 0x70, 0x2F, 0x53, 0x8F, 0xDF, 0xAF, 0xD5, 0xF8, 0xB8, 0x00, 0x24, 
    0x90, 0xF8, 0x53, 0x07, 0x96, 0x88, 0x83, 0xF8, 0xB8, 0x00, 0x12, 0x9C, 0x32, 0x9B, 0x52, 0x9A, 
    0x72, 0x99, 0x92, 0x98, 0xB2, 0x97, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xFD, 0xE7, 0xE7, 0xE7, 
    0x48, 0xAF, 0xBE, 0x03, 0xBA, 0x02, 0xB8, 0x3E, 0xB0, 0xCF, 0x83, 0xFF, 0x53, 0x07, 0xA8, 0x18, 
    0x34, 0xB9, 0x43, 0x40, 0x77, 0xE8, 0xB4, 0xE7, 0x83, 0x9A, 0xFC, 0x8A, 0x04, 0x89, 0xFF, 0x8A, 
    0x08, 0x09, 0x9A, 0xF7, 0x83, 0x44, 0x5E, 0x23, 0xFF, 0x62, 0x25, 0xF5, 0x27, 0xB8, 0x3F, 0xA0, 
    0xE8, 0xCF, 0xB8, 0x27, 0x37, 0xB9, 0x06, 0xA0, 0x18, 0xE9, 0xD7, 0xB0, 0x18, 0x18, 0xB0, 0x10, 
    0xBF, 0xF2, 0x9A, 0xF7, 0x55, 0x05, 0xB8, 0x35, 0xF0, 0x37, 0xD2, 0xF4, 0x37, 0x43, 0xC0, 0x54, 
    0x6D, 0x53, 0xBF, 0xA0, 0x15, 0x74, 0xC9, 0xFF, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x12, 0x14, 0x23, 0xFE, 0x5F, 0xAF, 0xB8, 0x2E, 0xF0, 0xAA, 0x55, 0x05, 0x23, 0x40, 0x54, 
    0x6D, 0xFA, 0x54, 0x6D, 0x15, 0x55, 0xFF, 0x32, 0x1B, 0x44, 0x32, 0x23, 0xFD, 0x5F, 0xAF, 0x05, 
    0x23, 0x20, 0x54, 0x6D, 0x74, 0xC9, 0x9A, 0xF8, 0x8A, 0x08, 0x89, 0xFF, 0x09, 0x9A, 0xF7, 0x55, 
    0x54, 0x6D, 0x15, 0xFF, 0x37, 0x52, 0x44, 0x23, 0xFB, 0x5F, 0xAF, 0xA8, 0x05, 0x23, 0x04, 0x54, 
    0x6D, 0xF8, 0x54, 0x6D, 0x25, 0x15, 0xFF, 0x37, 0x72, 0x5E, 0x23, 0xF7, 0x5F, 0xAF, 0x05, 0x74, 
    0x03, 0x23, 0x08, 0x54, 0x6D, 0xFE, 0x54, 0x6D, 0xFD, 0x54, 0x6D, 0xFC, 0x54, 0x6D, 0x05, 0xB8, 
    0x3E, 0x23, 0x17, 0xD0, 0x96, 0x6B, 0x23, 0x10, 0x54, 0x6D, 0x10, 0x24, 0xE6, 0x05, 0x86, 0x6D, 
    0x02, 0x83, 0xD5, 0xB8, 0x36, 0xA0, 0x54, 0xB6, 0x25, 0x76, 0xB8, 0xB8, 0x2F, 0xF0, 0x10, 0xA8, 
    0x22, 0xA0, 0x23, 0x26, 0xD8, 0x96, 0x8D, 0xF0, 0xAA, 0x74, 0xD0, 0x44, 0xFF, 0x23, 0x3B, 0xD8, 
    0x96, 0x8B, 0x74, 0xC9, 0xB8, 0x39, 0xF0, 0x39, 0x18, 0x18, 0xF0, 0x53, 0xF6, 0x43, 0x36, 0x3A, 
    0x8A, 0x08, 0x9A, 0xF7, 0xF0, 0x47, 0x53, 0xF5, 0x43, 0x35, 0x3A, 0xC8, 0xF0, 0x39, 0x8A, 0x08, 
    0x9A, 0xF7, 0x55, 0x44, 0xFF, 0x55, 0x15, 0x93, 0x22, 0xF2, 0xE4, 0xD2, 0xC5, 0xB2, 0xCC, 0xC5, 
    0x4F, 0xAF, 0xD5, 0x44, 0xFF, 0x53, 0x3F, 0xB8, 0x2F, 0xA0, 0x44, 0xFF, 0x92, 0xD6, 0xC5, 0x23, 
    0x7F, 0x5F, 0xAF, 0xD5, 0x44, 0xFF, 0xC5, 0x23, 0x80, 0x4F, 0x53, 0xF0, 0xAF, 0xD5, 0x27, 0xAA, 
    0xAE, 0xAF, 0x44, 0xFF, 0xAA, 0x53, 0x07, 0x03, 0x27, 0xA8, 0xFA, 0x77, 0x77, 0x77, 0x53, 0x07, 
    0x03, 0xC1, 0xE3, 0xAB, 0x37, 0x40, 0xA0, 0xFA, 0xD2, 0xE2, 0xFB, 0x50, 0xA0, 0x44, 0xFF, 0xB8, 
    0x36, 0xF0, 0x93, 0x23, 0xFF, 0xAE, 0xAD, 0xAC, 0x15, 0x74, 0xC9, 0x9A, 0x76, 0x8A, 0x46, 0x39, 
    0x8A, 0x08, 0x9A, 0xF7, 0x9A, 0xFD, 0x8A, 0x05, 0x8A, 0x08, 0x9A, 0xF7, 0x55, 0x05, 0xBB, 0x00, 
    0xEB, 0x20, 0xBB, 0x04, 0x74, 0x9D, 0x23, 0xB6, 0x5C, 0x43, 0x36, 0x15, 0x74, 0xC9, 0x3A, 0x8A, 
    0x08, 0x9A, 0xF7, 0xFC, 0x47, 0x53, 0xB5, 0x43, 0x35, 0x3A, 0x8A, 0x08, 0x9A, 0xF7, 0x55, 0x05, 
    0xBB, 0xC8, 0xEB, 0x42, 0xBB, 0x03, 0x74, 0x9D, 0xBB, 0x08, 0x00, 0x00, 0x74, 0x6F, 0xBA, 0x64, 
    0xEA, 0x50, 0x15, 0x74, 0xC9, 0x89, 0xFF, 0x9A, 0xF8, 0x8A, 0x08, 0x09, 0x9A, 0xF7, 0x55, 0x05, 
    0x18, 0x72, 0x67, 0xAA, 0x74, 0x96, 0xFA, 0x92, 0x6C, 0xC8, 0x74, 0x96, 0xEB, 0x4C, 0x83, 0xFC, 
    0x15, 0x74, 0xC9, 0x53, 0xF6, 0x43, 0x36, 0x3A, 0xB8, 0x06, 0x74, 0x89, 0xFC, 0x47, 0x74, 0xC9, 
    0x05, 0x53, 0xF5, 0x43, 0x35, 0x3A, 0xC8, 0x64, 0x89, 0x23, 0xC0, 0x6B, 0xE3, 0x50, 0x39, 0x8A, 
    0x08, 0x9A, 0xF7, 0x55, 0x05, 0x83, 0x23, 0xC0, 0x6B, 0xE3, 0x50, 0xA0, 0x83, 0x15, 0x74, 0xC9, 
    0x9A, 0xF8, 0x89, 0xFF, 0x8A, 0x08, 0x09, 0x9A, 0xF7, 0x55, 0x05, 0x92, 0xB5, 0xAA, 0x23, 0xC0, 
    0x6B, 0xA3, 0x5C, 0xAC, 0xFA, 0x72, 0xBF, 0x23, 0xC0, 0x6B, 0x03, 0x04, 0xA3, 0x5C, 0xAC, 0x83, 
    0xFF, 0xFE, 0xFD, 0xFB, 0xF7, 0xEF, 0xDF, 0xBF, 0x7F, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 
    0xB8, 0x27, 0xB9, 0x05, 0x23, 0x0C, 0x40, 0xA0, 0x18, 0xE9, 0xD4, 0x23, 0x04, 0x40, 0xA0, 0xB8, 
    0x26, 0xFA, 0x53, 0x0F, 0xC6, 0xEC, 0x68, 0xA9, 0x23, 0xFB, 0x51, 0xA1, 0xFA, 0xB8, 0x26, 0x47, 
    0x53, 0x0F, 0xC6, 0xFA, 0x68, 0xA9, 0x23, 0xF7, 0x51, 0xA1, 0x83, 0x1D, 0xFF, 0x02, 0x0C, 0xFD, 
 
} ;

int VDD = A0;
int PROG = A1;
int TEST0 = A2;
int RESET = A3;
int EA = A4;
int BUTTON = A5;
int LED = 13;

uint8_t LOWBYTE = 0;
uint8_t HIGHBYTE = 0;


void setup() {
  // Setup the Control-Pins
  Serial.begin(9600);
  pinMode(LED, OUTPUT);
  digitalWrite(LED, LOW);
  pinMode(VDD, OUTPUT);
  pinMode(PROG, OUTPUT);
  pinMode(TEST0, OUTPUT);
  pinMode(RESET, OUTPUT);
  pinMode(EA, OUTPUT);
  pinMode(BUTTON, INPUT_PULLUP);
  // Setup the Address-/Data-Pins to INPUT, to keep them floating for now
  DDRD = DDRD | B00000000;
  DDRB = B00000000;
  // Set the control-Pins according to MCS-48 recommendation
  digitalWrite(VDD, LOW); // Set VDD to +5V
  digitalWrite(PROG, LOW); // Set PROG to +5V
  digitalWrite(TEST0, HIGH); // Set TEST0 to +5V
  digitalWrite(EA, LOW); // Set EA to +5V
  digitalWrite(RESET, LOW); // Set RESET to 0V
  digitalWrite(LED, HIGH);
  delay(3000);
  digitalWrite(LED, LOW);
  delay(1000);
  Serial.println("MCS-48 Programmer READY");
    Serial.println("Programming Chip in 5 seconds");
  delay(5000);

  // program();
  Serial.println("Reading Chip in 5 seconds");
  delay(5000);
  readchip();
}

void loop() {
  // put your main code here, to run repeatedly:
  if(digitalRead(BUTTON) == LOW){
    Serial.println("Reading Chip in 5 Seconds");
    delay(5000);
    program();
  }
  else{
    digitalWrite(LED, HIGH);
    delay(100);
    digitalWrite(LED, LOW);
    delay(100);
  }

}

void program() {
  digitalWrite(TEST0, LOW);
  digitalWrite(EA, HIGH); // apply +18V to EA to activate Programming-Mode
  for(int i = 0; i < 1024; i++){
    // Setup the pins as outputs
    pinMode(2, OUTPUT);
    pinMode(3, OUTPUT);
    pinMode(4, OUTPUT);
    pinMode(5, OUTPUT);
    pinMode(6, OUTPUT);
    pinMode(7, OUTPUT);
    pinMode(8, OUTPUT);
    pinMode(9, OUTPUT);
    pinMode(10, OUTPUT);
    pinMode(11, OUTPUT);
    pinMode(12, OUTPUT);
    pinMode(13, OUTPUT);
    pinMode(A0, OUTPUT);
    pinMode(A1, OUTPUT);
    pinMode(A2, OUTPUT);
    pinMode(A3, OUTPUT);
    Serial.print("Reading Address ");
    Serial.print(i, HEX);
    int ADDRESS = i << 2;           // Set the current Address and Left-Shift it 2 bits to the left to account for the left-shift of the connections 
    HIGHBYTE = highByte(ADDRESS);
    Serial.print(" HIGHBYTE = ");
    Serial.print(HIGHBYTE, HEX);
    LOWBYTE = lowByte(ADDRESS);
    Serial.print(" LOWBYTE = ");
    Serial.print(LOWBYTE, HEX);
    PORTB = HIGHBYTE;
    PORTD = PORTD & B00000011;
    PORTD = PORTD | LOWBYTE;
    delay(10);                         // Wait 1ms to have stable lines
    digitalWrite(RESET, HIGH);        // Latch the Address into the MCS-48 µC
    delay(10);                         // Give the µC some time to latch the Address
//    Serial.print("   With Data ");
//    Serial.print(payload[i], HEX);
//    int DATA = payload[i] << 2;       // Load the current Payload-Byte
//    HIGHBYTE = highByte(DATA);        
//    Serial.print(" HIGHBYTE = ");
//    Serial.print(HIGHBYTE, HEX);
//    LOWBYTE = lowByte(DATA);
//    Serial.print(" LOWBYTE = ");
//    Serial.print(LOWBYTE, HEX);
//    PORTB = HIGHBYTE;
//    PORTD = PORTD & B00000011;
//    PORTD = PORTD | LOWBYTE; 
//    delay(10);
//    digitalWrite(VDD, HIGH);
//    delay(1);
//    digitalWrite(PROG, HIGH);
//    delay(50);
//    digitalWrite(PROG, LOW);
//    delay(1);
//    digitalWrite(VDD, LOW);
//    delay(10);
//    pinMode(2, INPUT_PULLUP);
//    pinMode(3, INPUT_PULLUP);
//    pinMode(4, INPUT_PULLUP);
//    pinMode(5, INPUT_PULLUP);
//    pinMode(6, INPUT_PULLUP);
//    pinMode(7, INPUT_PULLUP);
//    pinMode(8, INPUT_PULLUP);
//    pinMode(9, INPUT_PULLUP);
//    pinMode(10, INPUT_PULLUP);
//    pinMode(11, INPUT_PULLUP);
//    pinMode(12, INPUT_PULLUP);
    PORTB = B000000;
    PORTD = PORTD & B00000011;
    DDRB = B000000;
    DDRD = DDRD | B00000000;
    digitalWrite(TEST0, HIGH);
    delay(25);
    byte VERIFYL = PIND >> 2;
    Serial.print(" LOWBYTE: ");
    Serial.print(VERIFYL, HEX);
    byte VERIFYH = PINB;
    Serial.print(" HIGHBYTE: ");
    Serial.print(VERIFYH, HEX);
    int VERIFY = (PINB << 2) | PIND;
    Serial.print(" VERIFY: ");
    Serial.print(VERIFY, HEX);
    if (VERIFYL == LOWBYTE >> 2 && VERIFYH == HIGHBYTE){
      Serial.println(" OK");
      digitalWrite(LED, HIGH);
    }
    else{
      Serial.println(" ERROR");
      // error();
        }
   digitalWrite(TEST0, LOW);
   digitalWrite(RESET, LOW);
   digitalWrite(EA, LOW);
  }
}

void error(){
  Serial.println("ABORT WITH ERROR!");
  digitalWrite(EA, LOW);
  digitalWrite(TEST0, LOW);
  digitalWrite(RESET, LOW);
    while(true){
    digitalWrite(LED, HIGH);
  }
}

void done(){
  Serial.println("Programming DONE");
  digitalWrite(EA, LOW);
  digitalWrite(TEST0, LOW);
  digitalWrite(RESET, LOW);
    while(true){
    digitalWrite(LED, LOW);
  }
}

//void test(){ 
//  Serial.println("pulsing VDD");
//  delay(3500);
//  for(int i = 0; i < 100; i++){
//    digitalWrite(VDD, HIGH);
//    delay(5);
//    digitalWrite(VDD, LOW);
//    delay(15);
//  }
//  Serial.println("pulsing PROG");
//  delay(3500);
//  for(int i = 0; i < 100; i++){
//    digitalWrite(PROG, HIGH);
//    delay(5);
//    digitalWrite(PROG, LOW);
//    delay(15);
//  }
//  Serial.println("pulsing TEST0");
//  delay(3500);
//  for(int i = 0; i < 100; i++){
//    digitalWrite(TEST0, HIGH);
//    delay(5);
//    digitalWrite(TEST0, LOW);
//    delay(15);
//  }
// Serial.println("pulsing RESET");
// delay(3500);
// 
//   for(int i = 0; i < 100; i++){
//    digitalWrite(RESET, HIGH);
//    delay(5);
//    digitalWrite(RESET, LOW);
//    delay(15);
//  }
//}

void readchip() {
  digitalWrite(TEST0, LOW);
  digitalWrite(EA, HIGH); // apply +18V to EA to activate Programming-Mode
  for(int i = 0; i < 1024; i++){
    // Setup the pins as outputs
    pinMode(2, OUTPUT);
    pinMode(3, OUTPUT);
    pinMode(4, OUTPUT);
    pinMode(5, OUTPUT);
    pinMode(6, OUTPUT);
    pinMode(7, OUTPUT);
    pinMode(8, OUTPUT);
    pinMode(9, OUTPUT);
    pinMode(10, OUTPUT);
    pinMode(11, OUTPUT);
    pinMode(12, OUTPUT);
    pinMode(13, OUTPUT);
    pinMode(A0, OUTPUT);
    pinMode(A1, OUTPUT);
    pinMode(A2, OUTPUT);
    pinMode(A3, OUTPUT);
    Serial.print("Reading Address ");
    Serial.print(i, HEX);
    int ADDRESS = i << 2;           // Set the current Address and Left-Shift it 2 bits to the left to account for the left-shift of the connections 
    HIGHBYTE = highByte(ADDRESS);
    Serial.print(" HIGHBYTE = ");
    Serial.print(HIGHBYTE, HEX);
    LOWBYTE = lowByte(ADDRESS);
    Serial.print(" LOWBYTE = ");
    Serial.print(LOWBYTE, HEX);
    PORTB = HIGHBYTE;
    PORTD = PORTD & B00000011;
    PORTD = PORTD | LOWBYTE;
    delay(10);                         // Wait 1ms to have stable lines
    digitalWrite(RESET, HIGH);        // Latch the Address into the MCS-48 µC
    delay(10);                         // Give the µC some time to latch the Address
    Serial.print("   With Data ");
    Serial.print(payload[i], HEX);
    int DATA = payload[i] << 2;       // Load the current Payload-Byte
    HIGHBYTE = highByte(DATA);        
    Serial.print(" HIGHBYTE = ");
    Serial.print(HIGHBYTE, HEX);
    LOWBYTE = lowByte(DATA);
    Serial.print(" LOWBYTE = ");
    Serial.print(LOWBYTE, HEX);
//    PORTB = HIGHBYTE;
//    PORTD = PORTD & B00000011;
//    PORTD = PORTD | LOWBYTE; 
//    delay(10);
//    digitalWrite(VDD, HIGH);
//    delay(1);
//    digitalWrite(PROG, HIGH);
//    delay(50);
//    digitalWrite(PROG, LOW);
//    delay(1);
//    digitalWrite(VDD, LOW);
//    delay(10);
    pinMode(2, INPUT_PULLUP);
    pinMode(3, INPUT_PULLUP);
    pinMode(4, INPUT_PULLUP);
    pinMode(5, INPUT_PULLUP);
    pinMode(6, INPUT_PULLUP);
    pinMode(7, INPUT_PULLUP);
    pinMode(8, INPUT_PULLUP);
    pinMode(9, INPUT_PULLUP);
    pinMode(10, INPUT_PULLUP);
    pinMode(11, INPUT_PULLUP);
    pinMode(12, INPUT_PULLUP);
//    PORTB = B000000;
//    PORTD = PORTD & B00000011;
//    DDRB = B000000;
//    DDRD = DDRD | B00000000;
    digitalWrite(TEST0, HIGH);
    delay(25);
    byte VERIFYL = PIND >> 2;
    Serial.print(" LOWBYTE: ");
    Serial.print(VERIFYL, HEX);
    byte VERIFYH = PINB;
    Serial.print(" HIGHBYTE: ");
    Serial.print(VERIFYH, HEX);
    int VERIFY = (PINB << 2) | PIND;
    Serial.print(" VERIFY: ");
    Serial.print(VERIFY, HEX);
    if (VERIFYL == LOWBYTE >> 2 && VERIFYH == HIGHBYTE){
      Serial.println(" OK");
      digitalWrite(LED, HIGH);
    }
    else{
      Serial.println(" ERROR");
      // error();
        }
   digitalWrite(TEST0, LOW);
   digitalWrite(RESET, LOW);

  }
     digitalWrite(EA, LOW);
}